version: "3.8"

services:
  dfq-ig:
    container_name: dfq-ig
    image: devspace-forgerock-quickstart/frig:7.4.0-fbc
    build:
      context: ./docker/frig
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 512M
    env_file:
      - .env/frig/.env
    ports:
      - "8082:8080/tcp"
    depends_on:
      dfq-am:
        condition: service_healthy
    links:
      - dfq-am:fram
    networks:
      localdev:
        aliases:
          - frig.darkedges.localdev
  dfq-am:
    container_name: dfq-am
    image: devspace-forgerock-quickstart/fram:7.4.0-fbc
    build:
      context: ./docker/fram
      args:
        CONFIG_HOME: /opt/amster/config
    command: start
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 2048M
        reservations:
          cpus: "1"
          memory: 2048M
    volumes:
      - secrets:/var/run/secrets:r
    env_file:
      - .env/fram/.env
    ports:
      - "8081:8080/tcp"
    links:
      - dfq-ds:frds
    healthcheck:
      test: curl --include --retry 10 --retry-connrefused 'http://localhost:8080/openam/json/health/live' || exit 1
    depends_on:
      dfq-ds:
        condition: service_healthy
    networks:
      localdev:
        aliases:
          - fram.darkedges.localdev
  dfq-ds:
    container_name: dfq-ds
    image: devspace-forgerock-quickstart/frds:7.4.0-fbc
    build:
      context: docker/frds
    command: init_start
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 1024M
        reservations:
          cpus: "0.5"
          memory: 1024M
    environment:
      INIT_INSTANCE_LDIF: true
    env_file:
      - .env/frds/.env
    volumes:
      - secrets:/var/run/secrets:r
      - frds-development:/opt/frds/instance/data:rw
    ports:
      - "11636:1636/tcp"
      - "11389:1389/tcp"
    healthcheck:
      test: [ "CMD", "/opt/frds/healthCheck.sh" ]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - localdev
  dfq-vault:
    container_name: vault
    image: darkedges/vault:1.15.1
    build: ./docker/vault
    environment:
      VAULT_ADDR: "http://0.0.0.0:8200"
      VAULT_API_ADDR: "http://0.0.0.0:8200"
    ports:
      - "8201:8200/tcp"
    volumes:
      - vault:/vault/file:rw
      - ./docker/vault/config:/vault/config
    cap_add:
      - IPC_LOCK
    entrypoint: vault server -log-level trace -config /vault/config/vault-server.json
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8200 || exit 1
      interval: 10s
      retries: 12
      start_period: 10s
      timeout: 10s
    networks:
      localdev:
        aliases:
          - vault.darkedges.localdev
  dfq-vault-init:
    image: darkedges/vault:1.15.1
    volumes:
      - vault:/vault/file:r
    environment:
      VAULT_ADDR: "http://vault.darkedges.localdev:8200"
    container_name: vault-init
    entrypoint: /bin/sh -c "source /vault-init.sh"
    depends_on:
      dfq-vault:
        condition: service_healthy
    networks:
      - localdev
  dfq-terraform:
    container_name: vault-init
    image: darkedges/terraform:1.6.3
    build: ./docker/terraform
    environment:
      VAULT_ADDR: "http://vault.darkedges.localdev:8200"
      KUBECONFIG: /kube/config
    working_dir: /mnt/init
    volumes:
      - terraform:/mnt/terraform:rw
      - vault:/vault/file:r
      - vaultagent:/vault/agent:rw
      - secrets:/mnt/secrets:rw
      - ~/.kube:/root/.kube
    entrypoint: /bin/sh -c "source /init-vault.sh"
    depends_on:
      - dfq-vault-init
    links:
      - dfq-vault
    restart: "no"
    networks:
      - localdev
volumes:
  secrets:
  frds-development:
  vault:
  vaultagent:
  terraform:
networks:
  localdev:
