## Labels to apply to all resources
##
commonLabels: {}
# scmhash: abc123
# myLabel: aakkmd

# -- Rollback limit
##
revisionHistoryLimit: 10

## If true, create & use Pod Security Policy resources
## https://kubernetes.io/docs/concepts/policy/pod-security-policy/
podSecurityPolicy:
  enabled: false

genjks:
  image:
    repository: devspace-forgerock-quickstart/genjks
    tag: 7.5.0
    imagePullPolicy: IfNotPresent

frds:
  image:
    repository: devspace-forgerock-quickstart/ds
    tag: 7.5.0
    imagePullPolicy: IfNotPresent
    chroot: false
    runAsUser: 11111
    allowPrivilegeEscalation: true

  # certificates
  certificate:
    # frig.certificate.enabled -- Whether to attach a certificate to ingress
    enabled: false

  # Defines what is being deployed.
  # This chart can only deploy one instance type at a time
  instance:
    #  frds.instance.type -- should be one of directory, proxy, replication
    type: directory
    name:
    keystore:
      # frds.instance.keystore.password --  Password for the keystore
      password: changeit

  # frds.replicaCount -- number of replicas
  replicaCount: 1

  # define what the default values are for a Volume Claim Template
  volumeClaimTemplates:
    data:
      # frds.volumeClaimTemplates.data.storageClassName -- what storage class to use
      storageClassName:
      # frds.volumeClaimTemplates.data.storageSize -- size to be requested.
      storageSize: 100Mi

  # define what the default values are for a Schema Persistant volume
  persistentVolume:
    schema:
      # frds.persistentVolume.schema.storageClassName -- what storage class to use
      storageClassName:
      # frds.persistentVolume.schema.storageSize -- size to be requested.
      storageSize: 100Mi

  # These secrets should be in a vault and refenced from there
  secrets:
    directorymanager:
      # frds.secrets.directorymanager.password -- uid=admin password
      password: Passw0rd
    monitor:
      # frds.secrets.monitor.password -- uid=minotir password
      password: Passw0rd
    deploymentkey:
      # frds.secrets.deploymentkey.value -- Deployment Key value
      value: AKtnvIyweZddXIA2jL4hq6F5Bn7C1Q5CBVN1bkVDfvPByQLPrt_1mJw
      # frds.secrets.deploymentkey.password -- Deployment Key password
      password: Passw0rd
    amconfig:
      # frds.secrets.amconfig.password -- amconfig admin user password
      password: Passw0rd
    identity:
      # frds.secrets.identity.password -- ideneity admin user password
      password: Passw0rd
    cts:
      # frds.secrets.cts.password -- cts admin user password
      password: Passw0rd

  # frds.useKeystore -- has a keystore been generated and provided
  useKeystore: false

  # Is this a proxy?
  proxy:
    # frds.proxy.enabled -- is this a proxy server
    enabled: false

  init:
    # frds.init.env -- defaults value to add to the init config map
    env:

  env:
    # frds.env -- defaults value to add to the main config map
    DS_GROUP_ID: DE

  # frds.profile -- Profile details
  # these are the core values to be used for generating an instance
  profiles:
    amconfig:
      # frds.profiles.amconfig.baseDn -- base dn used for amconfig profile
      baseDn: ou=am-config
      # frds.profiles.amconfig.backendName -- backend name used for amconfig profile
      backendName: cfgStore
    identity:
      # frds.profiles.identity.baseDn -- base dn used for identity profile
      baseDn: ou=identities
      # frds.profiles.identity.backendName -- backend name used for identity profile
      backendName: amIdentityStore
    cts:
      # frds.profiles.cts.baseDn -- base dn used for cts profile
      baseDn: ou=tokens
      # frds.profiles.cts.backendName -- backend name used for cts profile
      backendName: amCts
      # frds.profiles.cts.tokenExpirationPolicy -- https://backstage.forgerock.com/docs/ds/7.2/install-guide/setup-profiles.html#am-cts-6.5.0
      tokenExpirationPolicy: ds
    idm:
      # frds.profiles.idm.baseDn -- base dn used for idm profile
      domain: ou=idm
      # frds.profiles.idm.backendName -- backend name used for idm profile
      backendName: idmRepo

  # frds.terminationGracePeriodSeconds -- used by the statefulset to see how many seconds should be allowed for a graceful termination
  terminationGracePeriodSeconds: 300

  # frds.services -- list of services that this instance will wait for.
  ## Useful for when you need to wait for a replication server to become available
  services: {}
  #  replication:
  #    waitfor: service
  #    name: frds-development
  #    releaseNameOverride: darkedges-frds
  #    port: 636
  #    ssl: true

  # -- Use an existing PSP instead of creating one
  existingPsp: ""
  # -- Labels to be added to the controller Deployment or DaemonSet and other resources that do not have option to specify labels
  ##
  labels: {}
  #  keel.sh/policy: patch
  #  keel.sh/trigger: poll

  # -- Required for use with CNI based kubernetes installations (such as ones set up by kubeadm),
  # since CNI and hostport don't mix yet. Can be deprecated once https://github.com/kubernetes/kubernetes/issues/23920
  # is merged
  hostNetwork: false

  # -- Node labels for controller pod assignment
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector:
    kubernetes.io/os: linux

  # -- The update strategy to apply to the Deployment or DaemonSet
  ##
  updateStrategy: {}
  #  rollingUpdate:
  #    maxUnavailable: 1
  #  type: RollingUpdate

  # -- `minReadySeconds` to avoid killing pods before we are ready
  ##
  minReadySeconds: 0

  # -- Node tolerations for server scheduling to nodes with taints
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  ##
  tolerations: []
  #  - key: "key"
  #    operator: "Equal|Exists"
  #    value: "value"
  #    effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"

  affinity: {}

  # -- Security Context policies for controller pods
  # See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for
  # notes on enabling and using sysctls
  ##
  podSecurityContext: {}

  # -- Security Context policies for controller main container.
  # See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for
  # notes on enabling and using sysctls
  ##
  containerSecurityContext: {}

  # -- See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for notes on enabling and using sysctls
  sysctls: {}
  # sysctls:
  #   "net.core.somaxconn": "8192"

  # -- Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in.
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  ##
  topologySpreadConstraints:
    []
    # - maxSkew: 1
    #   topologyKey: topology.kubernetes.io/zone
    #   whenUnsatisfiable: DoNotSchedule
    #   labelSelector:
    #     matchLabels:
    #       app.kubernetes.io/instance: frig-internal

  podManagementPolicy: OrderedReady
  resources:
    ##  limits:
    ##    cpu: 100m
    ##    memory: 90Mi
    requests:
      cpu: 100m
      memory: 90Mi

  ## Liveness and readiness probe values
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
  ##
  ## startupProbe:
  ##   tcpSocket:
  ##     port: 1636
  ##   initialDelaySeconds: 5
  ##   periodSeconds: 5
  ##   timeoutSeconds: 2
  ##   successThreshold: 1
  ##   failureThreshold: 5
  livenessProbe:
    tcpSocket:
      port: 1636
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 5
  readinessProbe:
    tcpSocket:
      port: 1636
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3

  # -- Optionally customize the pod dnsConfig.
  dnsConfig: {}

  # -- Optionally customize the pod hostname.
  hostname: {}

  # -- Optionally change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'.
  # By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller
  # to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.
  dnsPolicy: ClusterFirst

  # -- Improve connection draining when ingress controller pod is deleted using a lifecycle hook:
  # With this new hook, we increased the default terminationGracePeriodSeconds from 30 seconds
  # to 300, allowing the draining of connections up to five minutes.
  # If the active connections end before that, the pod will terminate gracefully at that time.
  # To effectively take advantage of this feature, the Configmap feature
  # worker-shutdown-timeout new value is 240s instead of 10s.
  ##
  lifecycle:
    preStop:
      exec:
        command:
          - /opt/frds/docker-entrypoint.sh
          - stop

  minAvailable: 1
  # Mutually exclusive with keda autoscaling
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 11
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50
    behavior:
      {}
      # scaleDown:
      #   stabilizationWindowSeconds: 300
      #  policies:
      #   - type: Pods
      #     value: 1
      #     periodSeconds: 180
      # scaleUp:
      #   stabilizationWindowSeconds: 300
      #   policies:
      #   - type: Pods
      #     value: 2
      #     periodSeconds: 60

  autoscalingTemplate: []
  # Custom or additional autoscaling metrics
  # ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-custom-metrics
  # - type: Pods
  #   pods:
  #     metric:
  #       name: nginx_ingress_controller_nginx_process_requests_total
  #     target:
  #       type: AverageValue
  #       averageValue: 10000m

  # Mutually exclusive with hpa autoscaling
  keda:
    apiVersion: "keda.sh/v1alpha1"
    ## apiVersion changes with keda 1.x vs 2.x
    ## 2.x = keda.sh/v1alpha1
    ## 1.x = keda.k8s.io/v1alpha1
    enabled: false
    minReplicas: 1
    maxReplicas: 11
    pollingInterval: 30
    cooldownPeriod: 300
    restoreToOriginalReplicaCount: false
    scaledObject:
      annotations: {}
      # Custom annotations for ScaledObject resource
      #  annotations:
      # key: value
    triggers: []
    #     - type: prometheus
    #       metadata:
    #         serverAddress: http://<prometheus-host>:9090
    #         metricName: http_requests_total
    #         threshold: '100'
    #         query: sum(rate(http_requests_total{deployment="my-deployment"}[2m]))

    behavior: {}
  #     scaleDown:
  #       stabilizationWindowSeconds: 300
  #       policies:
  #       - type: Pods
  #         value: 1
  #         periodSeconds: 180
  #     scaleUp:
  #       stabilizationWindowSeconds: 300
  #       policies:
  #       - type: Pods
  #         value: 2
  #         periodSeconds: 60
  ## Enable RBAC as per https://github.com/kubernetes/ingress-nginx/blob/main/docs/deploy/rbac.md and https://github.com/kubernetes/ingress-nginx/issues/266
  # rbac
  rbac:
    # frds.rbac.enabled -- whether to create roles and bindings
    enabled: true
  # service account
  serviceAccount:
    # frds.serviceAccount.create -- whether to create services accounts
    create: true
    automountServiceAccountToken: true
    # frds.serviceAccount.annotations -- list of annotations to attach to a service account
    annotations: {}
    name:

# -- Optional array of imagePullSecrets containing private registry credentials
## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# - name: secretName
